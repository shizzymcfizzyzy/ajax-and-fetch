{"{\"assumptions\":{},\"sourceRoot\":\"/Users/guranda/Desktop/proj/personal-website-server-master-4/web-pack-task-main 3/src/test/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/guranda/Desktop/proj/personal-website-server-master-4/web-pack-task-main 3\",\"filename\":\"/Users/guranda/Desktop/proj/personal-website-server-master-4/web-pack-task-main 3/src/test/email-validator.test.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/guranda/Desktop/proj/personal-website-server-master-4/web-pack-task-main 3\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.22.9:development":{"value":{"code":"import { expect } from \"chai\";\nimport sinon from \"sinon\";\nimport isValid from \"..email-validator.js\";\nimport { validateAsync, validateWithThrow, validateWithLog } from \"../validate-email.js\";\ndescribe(\"first test\", () => {\n  it(\"should return 2\", () => {\n    expect(2).to.equal(2);\n  });\n});\ndescribe(\"isValid\", () => {\n  it(\"should return true for valid email endings\", () => {\n    expect(isValid(\"example@gmail.com\")).to.be.true;\n    expect(isValid(\"user@outlook.com\")).to.be.true;\n    expect(isValid(\"test@yandex.ru\")).to.be.true;\n  });\n  it(\"should return false for invalid email endings\", () => {\n    expect(isValid(\"invalid@yahoo.com\")).to.be.false;\n    expect(isValid(\"test@invalid.com\")).to.be.false;\n    expect(isValid(\"example@invalid.net\")).to.be.false;\n  });\n\n  // it(\"should be case-insensitive\", () => {\n  //   expect(isValid(\"example@GMAIL.COM\")).to.be.true;\n  //   expect(isValid(\"user@Outlook.com\")).to.be.true;\n  // });\n});\n\ndescribe(\"validateAsync function\", function () {\n  it(\"should return true for valid email\", async function () {\n    const isValid = await validateAsync(\"test@gmail.com\");\n    expect(isValid).to.be.true;\n  });\n  it(\"should return false for invalid email\", async function () {\n    const isValid = await validateAsync(\"invalid\");\n    expect(isValid).to.be.false;\n  });\n  it(\"should return true for valid email ending asynchronously\", async function () {\n    const isValid = await validateAsync(\"test@outlook.com\");\n    expect(isValid).to.be.true;\n  });\n  it(\"should return false for invalid email ending asynchronously\", async function () {\n    const isValid = await validateAsync(\"test@invalid.com\");\n    expect(isValid).to.be.false;\n  });\n});\ndescribe(\"validateWithThrow function\", function () {\n  it(\"should throw an error for invalid email\", function () {\n    const invalidEmail = \"invalid\";\n    expect(() => validateWithThrow(invalidEmail)).to.throw(Error, /Invalid email: .+/);\n  });\n  it(\"should not throw an error for valid email\", function () {\n    const validEmail = \"test@gmail.com\";\n    expect(() => validateWithThrow(validEmail)).to.not.throw();\n  });\n  it(\"should not throw an error for valid email ending\", function () {\n    const validEmail = \"test@outlook.com\";\n    expect(() => validateWithThrow(validEmail)).to.not.throw();\n  });\n  it(\"should throw an error for invalid email ending\", function () {\n    const invalidEmail = \"test@invalid.com\";\n    expect(() => validateWithThrow(invalidEmail)).to.throw(Error, /Invalid email: .+/);\n  });\n});\ndescribe(\"validateWithLog function\", function () {\n  let consoleLogStub;\n  beforeEach(function () {\n    consoleLogStub = sinon.stub(console, \"log\");\n  });\n  afterEach(function () {\n    consoleLogStub.restore();\n  });\n  it(\"should log the correct message for valid email\", function () {\n    const email = \"test@gmail.com\";\n    const isValid = validateWithLog(email);\n    expect(isValid).to.be.true;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is valid`)).to.be.true;\n  });\n  it(\"should log the correct message for invalid email\", function () {\n    const email = \"invalid\";\n    const isValid = validateWithLog(email);\n    expect(isValid).to.be.false;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is invalid`)).to.be.true;\n  });\n  it(\"should log the correct message for another valid email\", function () {\n    const email = \"user@outlook.com\";\n    const isValid = validateWithLog(email);\n    expect(isValid).to.be.true;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is valid`)).to.be.true;\n  });\n  it(\"should log the correct message for another invalid email\", function () {\n    const email = \"invalid@example.net\";\n    const isValid = validateWithLog(email);\n    expect(isValid).to.be.false;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is invalid`)).to.be.true;\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["expect","sinon","isValid","validateAsync","validateWithThrow","validateWithLog","describe","it","to","equal","be","true","false","invalidEmail","throw","Error","validEmail","not","consoleLogStub","beforeEach","stub","console","afterEach","restore","email","calledWith"],"sourceRoot":"/Users/guranda/Desktop/proj/personal-website-server-master-4/web-pack-task-main 3/src/test/","sources":["email-validator.test.js"],"sourcesContent":["import { expect } from \"chai\";\nimport sinon from \"sinon\";\nimport isValid from \"..email-validator.js\";\n\nimport {\n  validateAsync,\n  validateWithThrow,\n  validateWithLog,\n} from \"../validate-email.js\";\ndescribe(\"first test\", () => {\n  it(\"should return 2\", () => {\n    expect(2).to.equal(2);\n  });\n});\ndescribe(\"isValid\", () => {\n  it(\"should return true for valid email endings\", () => {\n    expect(isValid(\"example@gmail.com\")).to.be.true;\n    expect(isValid(\"user@outlook.com\")).to.be.true;\n    expect(isValid(\"test@yandex.ru\")).to.be.true;\n  });\n\n  it(\"should return false for invalid email endings\", () => {\n    expect(isValid(\"invalid@yahoo.com\")).to.be.false;\n    expect(isValid(\"test@invalid.com\")).to.be.false;\n    expect(isValid(\"example@invalid.net\")).to.be.false;\n  });\n\n  // it(\"should be case-insensitive\", () => {\n  //   expect(isValid(\"example@GMAIL.COM\")).to.be.true;\n  //   expect(isValid(\"user@Outlook.com\")).to.be.true;\n  // });\n});\n\ndescribe(\"validateAsync function\", function () {\n  it(\"should return true for valid email\", async function () {\n    const isValid = await validateAsync(\"test@gmail.com\");\n    expect(isValid).to.be.true;\n  });\n\n  it(\"should return false for invalid email\", async function () {\n    const isValid = await validateAsync(\"invalid\");\n    expect(isValid).to.be.false;\n  });\n\n  it(\"should return true for valid email ending asynchronously\", async function () {\n    const isValid = await validateAsync(\"test@outlook.com\");\n    expect(isValid).to.be.true;\n  });\n\n  it(\"should return false for invalid email ending asynchronously\", async function () {\n    const isValid = await validateAsync(\"test@invalid.com\");\n    expect(isValid).to.be.false;\n  });\n});\n\ndescribe(\"validateWithThrow function\", function () {\n  it(\"should throw an error for invalid email\", function () {\n    const invalidEmail = \"invalid\";\n    expect(() => validateWithThrow(invalidEmail)).to.throw(\n      Error,\n      /Invalid email: .+/\n    );\n  });\n\n  it(\"should not throw an error for valid email\", function () {\n    const validEmail = \"test@gmail.com\";\n    expect(() => validateWithThrow(validEmail)).to.not.throw();\n  });\n\n  it(\"should not throw an error for valid email ending\", function () {\n    const validEmail = \"test@outlook.com\";\n    expect(() => validateWithThrow(validEmail)).to.not.throw();\n  });\n\n  it(\"should throw an error for invalid email ending\", function () {\n    const invalidEmail = \"test@invalid.com\";\n    expect(() => validateWithThrow(invalidEmail)).to.throw(\n      Error,\n      /Invalid email: .+/\n    );\n  });\n});\n\ndescribe(\"validateWithLog function\", function () {\n  let consoleLogStub;\n\n  beforeEach(function () {\n    consoleLogStub = sinon.stub(console, \"log\");\n  });\n\n  afterEach(function () {\n    consoleLogStub.restore();\n  });\n\n  it(\"should log the correct message for valid email\", function () {\n    const email = \"test@gmail.com\";\n\n    const isValid = validateWithLog(email);\n\n    expect(isValid).to.be.true;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is valid`)).to.be.true;\n  });\n\n  it(\"should log the correct message for invalid email\", function () {\n    const email = \"invalid\";\n\n    const isValid = validateWithLog(email);\n\n    expect(isValid).to.be.false;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is invalid`)).to.be.true;\n  });\n\n  it(\"should log the correct message for another valid email\", function () {\n    const email = \"user@outlook.com\";\n\n    const isValid = validateWithLog(email);\n\n    expect(isValid).to.be.true;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is valid`)).to.be.true;\n  });\n\n  it(\"should log the correct message for another invalid email\", function () {\n    const email = \"invalid@example.net\";\n\n    const isValid = validateWithLog(email);\n\n    expect(isValid).to.be.false;\n    expect(consoleLogStub.calledWith(`Email \"${email}\" is invalid`)).to.be.true;\n  });\n});\n"],"mappings":"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"}},"mtime":1692173074707}}